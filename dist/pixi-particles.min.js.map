{"version":3,"sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/PolygonalChain.ts","../src/Emitter.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts"],"names":["TextureFromString","PropertyNode","value","time","ease","this","next","isStepped","ParticleUtils","generateEase","createList","data","array","list","node","first","_a","hexToRGB","length","i","_b","value_1","time_1","start","end","GetTextureFromString","s","pixi","Texture","from","verbose","DEG_TO_RADS","Math","PI","rotatePoint","angle","p","sin","c","cos","xnew","x","y","ynew","combineRGBComponents","r","g","b","normalize","point","oneOverLen","scaleBy","sqrt","color","output","alpha","charAt","substr","indexOf","parseInt","a","segments","qty","oneOverQty","t","cp","e","getBlendMode","name","BLEND_MODES","NORMAL","toUpperCase","replace","createSteppedGradient","numSteps","currentNode","current","nextIndex","lerp","curVal","nextVal","PropertyList","isColor","interpolate","prototype","reset","intColorSimple","intValueSimple","intColorStepped","intValueStepped","intColorComplex","intValueComplex","Particle","_super","emitter","_this","call","anchor","velocity","Point","rotationSpeed","rotationAcceleration","maxLife","age","extraData","alphaList","speedList","speedMultiplier","acceleration","maxSpeed","NaN","scaleList","scaleMultiplier","colorList","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","prev","init","Particle_init","update","Particle_update","Sprite_destroy","destroy","Particle_destroy","applyArt","kill","__extends","rotation","noRotation","scale","tint","visible","art","texture","EMPTY","delta","deltaX","deltaY","speed","oldVX","oldVY","currentSpeed","position","newRotationSpeed","atan2","recycle","parent","removeChild","parseArt","baseTexture","window","console","warn","parseData","Sprite","PolygonalChain","countingLengths","totalLength","Array","isArray","chain","prevPoint","j","second","push","p1","p2","l","segLength","getRandomPoint","out","chosenSeg","rand","random","ticker","pixi.Ticker","shared","helperPoint","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","rotate","updateSpawnPos","updateOwnerPos","Object","defineProperty","cleanup","particle","slice","partClass","startRotation","min","max","lifetime","blendMode","parseSpawnType","frequency","pos","initAdditional","clone","emit","undefined","autoUpdate","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","newRot","diff","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","emitPosX","emitPosY","len","particleConstructor","floor","applyAdditionalProperties","children","shift","pop","index","splice","unshift","addChildAt","addChild","cb","width","height","radius","MATH_FUNCS","WHITELISTER","RegExp","concat","join","PathParticle","path","initialRotation","initialPosition","movement","pathString","matches","match","Function","parsePath","error","AnimatedParticle","textures","duration","framerate","elapsed","loop","frame","tex","outTextures","outArr","dupe","count"],"mappings":"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","file":"dist/pixi-particles.min.js.map","sourcesContent":["import {ParticleUtils, EaseSegment, SimpleEase, Color} from \"./ParticleUtils\";\r\nimport {BasicTweenable} from \"./EmitterConfig\";\r\n\r\nexport interface ValueStep<T> {\r\n\tvalue:T;\r\n\ttime:number;\r\n}\r\n\r\nexport interface ValueList<T> {\r\n\tlist: ValueStep<T>[],\r\n\tisStepped?: boolean;\r\n\tease?: SimpleEase|EaseSegment[];\r\n}\r\n/**\r\n * A single node in a PropertyList.\r\n */\r\nexport class PropertyNode<V>\r\n{\r\n\t/**\r\n\t * Value for the node.\r\n\t */\r\n\tpublic value: V;\r\n\t/**\r\n\t * Time value for the node. Between 0-1.\r\n\t */\r\n\tpublic time: number;\r\n\t/**\r\n\t * The next node in line.\r\n\t */\r\n\tpublic next: PropertyNode<V>;\r\n\t/**\r\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\r\n\t */\r\n\tpublic isStepped: boolean;\r\n\tpublic ease: SimpleEase;\r\n\t\r\n\t/**\r\n\t * @param value The value for this node\r\n\t * @param time The time for this node, between 0-1\r\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\r\n\t */\r\n\tconstructor(value: V, time:number, ease?: SimpleEase|EaseSegment[])\r\n\t{\r\n\t\tthis.value = value;\r\n\t\tthis.time = time;\r\n\t\tthis.next = null;\r\n\t\tthis.isStepped = false;\r\n\t\tif (ease)\r\n\t\t{\r\n\t\t\tthis.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.ease = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n\t * {start, end}.\r\n\t * @param data The data for the list.\r\n\t * @param data.list The array of value and time objects.\r\n\t * @param data.isStepped If the list is stepped rather than interpolated.\r\n\t * @param data.ease Custom ease for this list.\r\n\t * @return The first node in the list\r\n\t */\r\n\tpublic static createList<T extends (string|number)>(data: ValueList<T>|BasicTweenable<T>):PropertyNode<T extends string ? Color : T>\r\n\t{\r\n\t\tif (\"list\" in data)\r\n\t\t{\r\n\t\t\tlet array = data.list;\r\n\t\t\tlet node, first;\r\n\t\t\tconst {value, time} = array[0];\r\n\t\t\tfirst = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\r\n\t\t\t//only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n\t\t\tif (array.length > 2 || (array.length === 2 && array[1].value !== value))\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 1; i < array.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst {value, time} = array[i];\r\n\t\t\t\t\tnode.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\r\n\t\t\t\t\tnode = node.next;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfirst.isStepped = !!data.isStepped;\r\n\t\t\treturn first as PropertyNode<T extends string ? Color : T>;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//Handle deprecated version here\r\n\t\t\tlet start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\r\n\t\t\t//only set up a next value if it is different from the starting value\r\n\t\t\tif (data.end !== data.start)\r\n\t\t\t\tstart.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\r\n\t\t\treturn start as PropertyNode<T extends string ? Color : T>;\r\n\t\t}\r\n\t}\r\n}","import {BLEND_MODES, Point, Texture} from 'pixi.js-legacy';\r\nimport {PropertyNode, ValueStep} from './PropertyNode';\r\nimport * as pixi from \"pixi.js-legacy\";\r\n\r\nlet TextureFromString: (s:string) => pixi.Texture;\r\nconst pixiNS = pixi;\r\nTextureFromString = (pixiNS as any).Texture.from;\r\n\r\n\r\nexport function GetTextureFromString(s:string): Texture {\r\n\treturn TextureFromString(s);\r\n}\r\n\r\nexport interface Color {\r\n\tr: number,\r\n\tg: number,\r\n\tb: number,\r\n\ta?: number\r\n}\r\n\r\nexport interface EaseSegment {\r\n\tcp:number;\r\n\ts:number;\r\n\te:number;\r\n}\r\n\r\nexport type SimpleEase = (time:number) => number;\r\n\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n */\r\nexport namespace ParticleUtils {\r\n\t/**\r\n\t * If errors and warnings should be logged within the library.\r\n\t */\r\n\texport let verbose = false;\r\n\r\n\texport const DEG_TO_RADS = Math.PI / 180;\r\n\r\n\t/**\r\n\t * Rotates a point by a given angle.\r\n\t * @param angle The angle to rotate by in degrees\r\n\t * @param p The point to rotate around 0,0.\r\n\t */\r\n\texport function rotatePoint(angle:number, p:Point)\r\n\t{\r\n\t\tif (!angle) return;\r\n\t\tangle *= ParticleUtils.DEG_TO_RADS;\r\n\t\tconst s = Math.sin(angle);\r\n\t\tconst c = Math.cos(angle);\r\n\t\tconst xnew = p.x * c - p.y * s;\r\n\t\tconst ynew = p.x * s + p.y * c;\r\n\t\tp.x = xnew;\r\n\t\tp.y = ynew;\r\n\t}\r\n\r\n\t/**\r\n\t * Combines separate color components (0-255) into a single uint color.\r\n\t * @param r The red value of the color\r\n\t * @param g The green value of the color\r\n\t * @param b The blue value of the color\r\n\t * @return The color in the form of 0xRRGGBB\r\n\t */\r\n\texport function combineRGBComponents(r:number, g:number, b:number/*, a*/): number\r\n\t{\r\n\t\treturn /*a << 24 |*/ r << 16 | g << 8 | b;\r\n\t}\r\n\r\n\t/**\r\n\t * Reduces the point to a length of 1.\r\n\t * @param point The point to normalize\r\n\t */\r\n\texport function normalize(point:Point): void\r\n\t{\r\n\t\tlet oneOverLen = 1 / ParticleUtils.length(point);\r\n\t\tpoint.x *= oneOverLen;\r\n\t\tpoint.y *= oneOverLen;\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the x and y values of this point by a value.\r\n\t * @param point The point to scaleBy\r\n\t * @param value The value to scale by.\r\n\t */\r\n\texport function scaleBy(point:Point, value:number): void\r\n\t{\r\n\t\tpoint.x *= value;\r\n\t\tpoint.y *= value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the length (or magnitude) of this point.\r\n\t * @param point The point to measure length\r\n\t * @return The length of this point.\r\n\t */\r\n\texport function length(point:Point): number\r\n\t{\r\n\t\treturn Math.sqrt(point.x * point.x + point.y * point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n\t * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n\t * {r, g, b, (a)}.\r\n\t * @param color The input color string.\r\n\t * @param output An object to put the output in. If omitted, a new object is created.\r\n\t * @return The object with r, g, and b properties, possibly with an a property.\r\n\t */\r\n\texport function hexToRGB(color:string, output?:Color): Color\r\n\t{\r\n\t\tif (!output)\r\n\t\t\toutput = {} as Color;\r\n\t\tif (color.charAt(0) == \"#\")\r\n\t\t\tcolor = color.substr(1);\r\n\t\telse if (color.indexOf(\"0x\") === 0)\r\n\t\t\tcolor = color.substr(2);\r\n\t\tlet alpha;\r\n\t\tif (color.length == 8)\r\n\t\t{\r\n\t\t\talpha = color.substr(0, 2);\r\n\t\t\tcolor = color.substr(2);\r\n\t\t}\r\n\t\toutput.r = parseInt(color.substr(0, 2), 16);//Red\r\n\t\toutput.g = parseInt(color.substr(2, 2), 16);//Green\r\n\t\toutput.b = parseInt(color.substr(4, 2), 16);//Blue\r\n\t\tif (alpha)\r\n\t\t\toutput.a = parseInt(alpha, 16);\r\n\t\treturn output;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n\t * by the related tool at http://www.greensock.com/customease/.\r\n\t * @param segments An array of segments, as created by\r\n\t * http://www.greensock.com/customease/.\r\n\t * @return A function that calculates the percentage of change at\r\n\t *                    a given point in time (0-1 inclusive).\r\n\t */\r\n\texport function generateEase(segments:EaseSegment[]): SimpleEase\r\n\t{\r\n\t\tconst qty = segments.length;\r\n\t\tconst oneOverQty = 1 / qty;\r\n\t\t/*\r\n\t\t * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n\t\t * @param {Number} time The time of the ease, 0-1 inclusive.\r\n\t\t * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n\t\t *                  ease goes outside those bounds).\r\n\t\t */\r\n\t\treturn function(time:number)\r\n\t\t{\r\n\t\t\tlet t: number, s: EaseSegment;\r\n\t\t\tlet i = (qty * time) | 0;//do a quick floor operation\r\n\t\t\tt = (time - (i * oneOverQty)) * qty;\r\n\t\t\ts = segments[i] || segments[qty - 1];\r\n\t\t\treturn (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a blend mode, ensuring that it is valid.\r\n\t * @param name The name of the blend mode to get.\r\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n\t */\r\n\texport function getBlendMode(name:string): number\r\n\t{\r\n\t\tif (!name) return BLEND_MODES.NORMAL;\r\n\t\tname = name.toUpperCase();\r\n\t\twhile (name.indexOf(\" \") >= 0)\r\n\t\t\tname = name.replace(\" \", \"_\");\r\n\t\treturn (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n\t * @param list The list of data to convert.\r\n\t * @param [numSteps=10] The number of steps to use.\r\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\r\n\t */\r\n\texport function createSteppedGradient(list:ValueStep<string>[], numSteps:number = 10) {\r\n\t\tif (typeof numSteps !== 'number' || numSteps <= 0)\r\n\t\t\tnumSteps = 10;\r\n\t\tlet first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\r\n\t\tfirst.isStepped = true;\r\n\t\tlet currentNode = first;\r\n\t\tlet current = list[0];\r\n\t\tlet nextIndex = 1;\r\n\t\tlet next = list[nextIndex];\r\n\t\tfor (let i = 1; i < numSteps; ++i)\r\n\t\t{\r\n\t\t\tlet lerp = i / numSteps;\r\n\t\t\t//ensure we are on the right segment, if multiple\r\n\t\t\twhile (lerp > next.time)\r\n\t\t\t{\r\n\t\t\t\tcurrent = next;\r\n\t\t\t\tnext = list[++nextIndex];\r\n\t\t\t}\r\n\t\t\t//convert the lerp value to the segment range\r\n\t\t\tlerp = (lerp - current.time) / (next.time - current.time);\r\n\t\t\tlet curVal = ParticleUtils.hexToRGB(current.value);\r\n\t\t\tlet nextVal = ParticleUtils.hexToRGB(next.value);\r\n\t\t\tlet output:Color = {\r\n\t\t\t\tr: (nextVal.r - curVal.r) * lerp + curVal.r,\r\n\t\t\t\tg: (nextVal.g - curVal.g) * lerp + curVal.g,\r\n\t\t\t\tb: (nextVal.b - curVal.b) * lerp + curVal.b,\r\n\t\t\t};\r\n\t\t\tcurrentNode.next = new PropertyNode(output, i / numSteps);\r\n\t\t\tcurrentNode = currentNode.next;\r\n\t\t}\r\n\t\t//we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n\t\t//the particle has died of old age\r\n\t\treturn first;\r\n\t}\r\n}","import {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\r\nimport {PropertyNode} from \"./PropertyNode\";\r\n\r\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n */\r\nexport class PropertyList<V>\r\n{\r\n\t/**\r\n\t * The current property node in the linked list.\r\n\t */\r\n\tpublic current: PropertyNode<V>;\r\n\t/**\r\n\t * The next property node in the linked list. Stored separately for slightly less variable\r\n\t * access.\r\n\t */\r\n\tpublic next: PropertyNode<V>;\r\n\t/**\r\n\t * Calculates the correct value for the current interpolation value. This method is set in\r\n\t * the reset() method.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The interpolated value. Colors are converted to the hex value.\r\n\t */\r\n\tpublic interpolate: (lerp:number)=>number;\r\n\t/**\r\n\t * A custom easing method for this list.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The eased value, also from 0-1.\r\n\t */\r\n\tpublic ease: SimpleEase;\r\n\t/**\r\n\t * If this list manages colors, which requires a different method for interpolation.\r\n\t */\r\n\tprivate isColor: boolean;\r\n\t\r\n    /**\r\n     * @param isColor If this list handles color values\r\n     */\r\n\tconstructor(isColor: boolean = false)\r\n\t{\r\n\t\tthis.current = null;\r\n\t\tthis.next = null;\r\n\t\tthis.isColor = !!isColor;\r\n\t\tthis.interpolate = null;\r\n\t\tthis.ease = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the list for use.\r\n\t * @param first The first node in the list.\r\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\r\n\t */\r\n\tpublic reset(first: PropertyNode<V>)\r\n\t{\r\n\t\tthis.current = first;\r\n\t\tthis.next = first.next;\r\n\t\tconst isSimple = this.next && this.next.time >= 1;\r\n\t\tif (isSimple)\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n\t\t}\r\n\t\telse if (first.isStepped)\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n\t\t}\r\n\t\tthis.ease = this.current.ease;\r\n\t}\r\n}\r\n\r\nfunction intValueSimple(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\n\r\nfunction intColorSimple(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\tlet curVal = this.current.value, nextVal = this.next.value;\r\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueComplex(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\t//convert the lerp value to the segment range\r\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\n\r\nfunction intColorComplex(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\t//convert the lerp value to the segment range\r\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n\tlet curVal = this.current.value, nextVal = this.next.value;\r\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueStepped(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (this.next && lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\treturn this.current.value;\r\n}\r\n\r\nfunction intColorStepped(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (this.next && lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\tlet curVal = this.current.value;\r\n\treturn ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}","import {Emitter} from \"./Emitter\";\r\nimport {ParticleUtils, SimpleEase, Color, GetTextureFromString} from \"./ParticleUtils\";\r\nimport {PropertyList} from \"./PropertyList\";\r\nimport {Sprite, Point, Texture} from 'pixi.js-legacy';\r\n\r\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n */\r\nexport class Particle extends Sprite\r\n{\r\n\t/**\r\n\t * The emitter that controls this particle.\r\n\t */\r\n\tpublic emitter: Emitter;\r\n\t/**\r\n\t * The velocity of the particle. Speed may change, but the angle also\r\n\t * contained in velocity is constant.\r\n\t */\r\n\tpublic velocity: Point;\r\n\t/**\r\n\t * The maximum lifetime of this particle, in seconds.\r\n\t */\r\n\tpublic maxLife: number;\r\n\t/**\r\n\t * The current age of the particle, in seconds.\r\n\t */\r\n\tpublic age: number;\r\n\t/**\r\n\t * A simple easing function to be applied to all properties that\r\n\t * are being interpolated.\r\n\t */\r\n\tpublic ease: SimpleEase;\r\n\t/**\r\n\t * Extra data that the emitter passes along for custom particles.\r\n\t */\r\n\tpublic extraData: any;\r\n\t/**\r\n\t * The alpha of the particle throughout its life.\r\n\t */\r\n\tpublic alphaList: PropertyList<number>;\r\n\t/**\r\n\t * The speed of the particle throughout its life.\r\n\t */\r\n\tpublic speedList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\r\n\t */\r\n\tpublic speedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to the particle.\r\n\t */\r\n\tpublic acceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tpublic maxSpeed: number;\r\n\t/**\r\n\t * Speed at which the particle rotates, in radians per second.\r\n\t */\r\n\tpublic rotationSpeed: number;\r\n\r\n\t/**\r\n\t * Acceleration of rotation (angular acceleration) to apply to the particle.\r\n\t */\r\n\tpublic rotationAcceleration: number;\r\n\r\n\t/**\r\n\t * If particle rotation is locked, preventing rotation from occurring due\r\n\t * to directional changes.\r\n\t */\r\n\tpublic noRotation: boolean;\r\n\t/**\r\n\t * The scale of the particle throughout its life.\r\n\t */\r\n\tpublic scaleList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n\t */\r\n\tpublic scaleMultiplier: number;\r\n\t/**\r\n\t * The tint of the particle throughout its life.\r\n\t */\r\n\tpublic colorList: PropertyList<Color>;\r\n\t/**\r\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\r\n\t */\r\n\tprotected Particle_init: typeof Particle.prototype.init;\r\n\t/**\r\n\t * A reference to update so that subclasses can access the original without the overhead\r\n\t * of Function.call().\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\r\n\t *                   properties. A value of -1 means the particle died of old age instead.\r\n\t */\r\n\tprotected Particle_update: typeof Particle.prototype.update;\r\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\r\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\r\n\t/**\r\n\t * If alpha should be interpolated at all.\r\n\t */\r\n\tprotected _doAlpha: boolean;\r\n\t/**\r\n\t * If scale should be interpolated at all.\r\n\t */\r\n\tprotected _doScale: boolean;\r\n\t/**\r\n\t * If speed should be interpolated at all.\r\n\t */\r\n\tprotected _doSpeed: boolean;\r\n\t/**\r\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n\t * and _doSpeed gets priority.\r\n\t */\r\n\tprotected _doAcceleration: boolean;\r\n\t/**\r\n\t * If color should be interpolated at all.\r\n\t */\r\n\tprotected _doColor: boolean;\r\n\t/**\r\n\t * If normal movement should be handled. Subclasses wishing to override movement\r\n\t * can set this to false in init().\r\n\t */\r\n\tprotected _doNormalMovement: boolean;\r\n\t/**\r\n\t * One divided by the max life of the particle, saved for slightly faster math.\r\n\t */\r\n\tprivate _oneOverLife: number;\r\n\t/**\r\n\t * Reference to the next particle in the list.\r\n\t */\r\n\tpublic next: Particle;\r\n\r\n\t/**\r\n\t * Reference to the previous particle in the list.\r\n\t */\r\n\tpublic prev: Particle;\r\n\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\t//start off the sprite with a blank texture, since we are going to replace it\r\n\t\t//later when the particle is initialized.\r\n\t\tsuper();\r\n\t\tthis.emitter = emitter;\r\n\t\t//particles should be centered\r\n\t\tthis.anchor.x = this.anchor.y = 0.5;\r\n\t\tthis.velocity = new Point();\r\n\t\tthis.rotationSpeed = 0;\r\n\t\tthis.rotationAcceleration = 0;\r\n\t\tthis.maxLife = 0;\r\n\t\tthis.age = 0;\r\n\t\tthis.ease = null;\r\n\t\tthis.extraData = null;\r\n\t\tthis.alphaList = new PropertyList();\r\n\t\tthis.speedList = new PropertyList();\r\n\t\tthis.speedMultiplier = 1;\r\n\t\tthis.acceleration = new Point();\r\n\t\tthis.maxSpeed = NaN;\r\n\t\tthis.scaleList = new PropertyList();\r\n\t\tthis.scaleMultiplier = 1;\r\n\t\tthis.colorList = new PropertyList(true);\r\n\t\tthis._doAlpha = false;\r\n\t\tthis._doScale = false;\r\n\t\tthis._doSpeed = false;\r\n\t\tthis._doAcceleration = false;\r\n\t\tthis._doColor = false;\r\n\t\tthis._doNormalMovement = false;\r\n\t\tthis._oneOverLife = 0;\r\n\t\tthis.next = null;\r\n\t\tthis.prev = null;\r\n\r\n\t\t//save often used functions on the instance instead of the prototype for better speed\r\n\t\tthis.init = this.init;\r\n\t\tthis.Particle_init = Particle.prototype.init;\r\n\t\tthis.update = this.update;\r\n\t\tthis.Particle_update = Particle.prototype.update;\r\n\t\tthis.Sprite_destroy = super.destroy;\r\n\t\tthis.Particle_destroy = Particle.prototype.destroy;\r\n\t\tthis.applyArt = this.applyArt;\r\n\t\tthis.kill = this.kill;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\t//reset the age\r\n\t\tthis.age = 0;\r\n\t\t//set up the velocity based on the start speed and rotation\r\n\t\tthis.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n\t\tthis.velocity.y = 0;\r\n\t\tParticleUtils.rotatePoint(this.rotation, this.velocity);\r\n\t\tif (this.noRotation)\r\n\t\t{\r\n\t\t\tthis.rotation = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//convert rotation to Radians from Degrees\r\n\t\t\tthis.rotation *= ParticleUtils.DEG_TO_RADS;\r\n\t\t}\r\n\t\t//convert rotation speed to Radians from Degrees\r\n\t\tthis.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\r\n\t\tthis.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\r\n\r\n\t\t//set alpha to inital alpha\r\n\t\tthis.alpha = this.alphaList.current.value;\r\n\t\t//set scale to initial scale\r\n\t\tthis.scale.x = this.scale.y = this.scaleList.current.value;\r\n\t\t//figure out what we need to interpolate\r\n\t\tthis._doAlpha = !!this.alphaList.current.next;\r\n\t\tthis._doSpeed = !!this.speedList.current.next;\r\n\t\tthis._doScale = !!this.scaleList.current.next;\r\n\t\tthis._doColor = !!this.colorList.current.next;\r\n\t\tthis._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n\t\t//_doNormalMovement can be cancelled by subclasses\r\n\t\tthis._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n\t\t//save our lerp helper\r\n\t\tthis._oneOverLife = 1 / this.maxLife;\r\n\t\t//set the inital color\r\n\t\tlet color = this.colorList.current.value;\r\n\t\tthis.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\r\n\t\t//ensure visibility\r\n\t\tthis.visible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the texture for the particle. This can be overridden to allow\r\n\t * for an animated particle.\r\n\t * @param art The texture to set.\r\n\t */\r\n\tpublic applyArt(art: any)\r\n\t{\r\n\t\tthis.texture = art || Texture.EMPTY;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all\r\n\t *         relevant particle properties. A value of -1 means the particle\r\n\t *         died of old age instead.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\t//increase age\r\n\t\tthis.age += delta;\r\n\t\t//recycle particle if it is too old\r\n\t\tif(this.age >= this.maxLife || this.age < 0)\r\n\t\t{\r\n\t\t\tthis.kill();\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t//determine our interpolation value\r\n\t\tlet lerp = this.age * this._oneOverLife;//lifetime / maxLife;\r\n\t\tif (this.ease)\r\n\t\t{\r\n\t\t\tif(this.ease.length == 4)\r\n\t\t\t{\r\n\t\t\t\t//the t, b, c, d parameters that some tween libraries use\r\n\t\t\t\t//(time, initial value, end value, duration)\r\n\t\t\t\tlerp = (this.ease as any)(lerp, 0, 1, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//the simplified version that we like that takes\r\n\t\t\t\t//one parameter, time from 0-1. TweenJS eases provide this usage.\r\n\t\t\t\tlerp = this.ease(lerp);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//interpolate alpha\r\n\t\tif (this._doAlpha)\r\n\t\t\tthis.alpha = this.alphaList.interpolate(lerp);\r\n\t\t//interpolate scale\r\n\t\tif (this._doScale)\r\n\t\t{\r\n\t\t\tlet scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n\t\t\tthis.scale.x = this.scale.y = scale;\r\n\t\t}\r\n\t\t//handle movement\r\n\t\tif(this._doNormalMovement)\r\n\t\t{\r\n\t\t\tlet deltaX:number;\r\n\t\t\tlet deltaY:number;\r\n\t\t\t//interpolate speed\r\n\t\t\tif (this._doSpeed)\r\n\t\t\t{\r\n\t\t\t\tlet speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\t\t\t\tParticleUtils.normalize(this.velocity);\r\n\t\t\t\tParticleUtils.scaleBy(this.velocity, speed);\r\n\t\t\t\tdeltaX = this.velocity.x * delta;\r\n\t\t\t\tdeltaY = this.velocity.y * delta;\r\n\t\t\t}\r\n\t\t\telse if(this._doAcceleration)\r\n\t\t\t{\r\n\t\t\t\tconst oldVX = this.velocity.x;\r\n\t\t\t\tconst oldVY = this.velocity.y;\r\n\t\t\t\tthis.velocity.x += this.acceleration.x * delta;\r\n\t\t\t\tthis.velocity.y += this.acceleration.y * delta;\r\n\t\t\t\tif (this.maxSpeed)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet currentSpeed = ParticleUtils.length(this.velocity);\r\n\t\t\t\t\t//if we are going faster than we should, clamp at the max speed\r\n\t\t\t\t\t//DO NOT recalculate vector length\r\n\t\t\t\t\tif (currentSpeed > this.maxSpeed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// calculate position delta by the midpoint between our old velocity and our new velocity\r\n\t\t\t\tdeltaX = (oldVX + this.velocity.x) / 2 * delta;\r\n\t\t\t\tdeltaY = (oldVY + this.velocity.y) / 2 * delta;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdeltaX = this.velocity.x * delta;\r\n\t\t\t\tdeltaY = this.velocity.y * delta;\r\n\t\t\t}\r\n\t\t\t//adjust position based on velocity\r\n\t\t\tthis.position.x += deltaX;\r\n\t\t\tthis.position.y += deltaY;\r\n\t\t}\r\n\t\t//interpolate color\r\n\t\tif (this._doColor)\r\n\t\t{\r\n\t\t\tthis.tint = this.colorList.interpolate(lerp);\r\n\t\t}\r\n\t\t//update rotation\r\n\t\tif (this.rotationAcceleration !== 0)\r\n\t\t{\r\n\t\t\tconst newRotationSpeed = this.rotationSpeed + this.rotationAcceleration * delta;\r\n\r\n\t\t\tthis.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\r\n\t\t\tthis.rotationSpeed = newRotationSpeed;\r\n\t\t}\r\n\t\telse if (this.rotationSpeed !== 0)\r\n\t\t{\r\n\t\t\tthis.rotation += this.rotationSpeed * delta;\r\n\t\t}\r\n\t\telse if(this.acceleration && !this.noRotation)\r\n\t\t{\r\n\t\t\tthis.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\r\n\t/**\r\n\t * Kills the particle, removing it from the display list\r\n\t * and telling the emitter to recycle it.\r\n\t */\r\n\tpublic kill()\r\n\t{\r\n\t\tthis.emitter.recycle(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tif (this.parent)\r\n\t\t\tthis.parent.removeChild(this);\r\n\t\tthis.Sprite_destroy();\r\n\t\tthis.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\r\n\t\t\tthis.speedList = this.ease = this.next = this.prev = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.from().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art:any[]): any[]\r\n\t{\r\n\t\t//convert any strings to Textures.\r\n\t\tlet i;\r\n\t\tfor(i = art.length; i >= 0; --i)\r\n\t\t{\r\n\t\t\tif(typeof art[i] == \"string\")\r\n\t\t\t\tart[i] = GetTextureFromString(art[i]);\r\n\t\t}\r\n\t\t//particles from different base textures will be slower in WebGL than if they\r\n\t\t//were from one spritesheet\r\n\t\tif(ParticleUtils.verbose)\r\n\t\t{\r\n\t\t\tfor(i = art.length - 1; i > 0; --i)\r\n\t\t\t{\r\n\t\t\t\tif(art[i].baseTexture != art[i - 1].baseTexture)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (window.console)\r\n\t\t\t\t\t\tconsole.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn art;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * Particle does nothing to the extra data.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tpublic static parseData(extraData: any): any\r\n\t{\r\n\t\treturn extraData;\r\n\t}\r\n}\r\n","import {Point} from 'pixi.js-legacy';\r\n\r\nexport interface BasicPoint\r\n{\r\n\tx: number;\r\n\ty: number;\r\n}\r\n\r\nexport interface Segment\r\n{\r\n\tp1: BasicPoint;\r\n\tp2: BasicPoint;\r\n\tl: number;\r\n}\r\n\r\n/**\r\n * Chain of line segments for generating spawn positions.\r\n */\r\nexport class PolygonalChain\r\n{\r\n\t/**\r\n\t * List of segment objects in the chain.\r\n\t */\r\n\tprivate segments:Segment[];\r\n\t/**\r\n\t * Total length of all segments of the chain.\r\n\t */\r\n\tprivate totalLength:number;\r\n\t/**\r\n\t * Total length of segments up to and including the segment of the same index.\r\n\t * Used for weighted random selection of segment.\r\n\t */\r\n\tprivate countingLengths:number[];\r\n\t\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tconstructor(data:BasicPoint[]|BasicPoint[][])\r\n\t{\r\n\t\tthis.segments = [];\r\n\t\tthis.countingLengths = [];\r\n\t\tthis.totalLength = 0;\r\n\t\tthis.init(data);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tprivate init(data:BasicPoint[]|BasicPoint[][])\r\n\t{\r\n\t\t// if data is not present, set up a segment of length 0\r\n\t\tif (!data || !data.length)\r\n\t\t{\r\n\t\t\tthis.segments.push({p1:{x:0, y:0}, p2:{x:0, y:0}, l:0});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Array.isArray(data[0]))\r\n\t\t\t{\r\n\t\t\t\t// list of segment chains, each defined as a list of points\r\n\t\t\t\tfor (let i = 0; i < data.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\t// loop through the chain, connecting points\r\n\t\t\t\t\tconst chain = data[i] as BasicPoint[];\r\n\t\t\t\t\tlet prevPoint = chain[0] as BasicPoint;\r\n\t\t\t\t\tfor (let j = 1; j < chain.length; ++j)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst second = chain[j] as BasicPoint;\r\n\t\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\r\n\t\t\t\t\t\tprevPoint = second;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet prevPoint = data[0] as BasicPoint;\r\n\t\t\t\t// list of points\r\n\t\t\t\tfor (let i = 1; i < data.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst second = data[i] as BasicPoint;\r\n\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\r\n\t\t\t\t\tprevPoint = second;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// now go through our segments to calculate the lengths so that we\r\n\t\t// can set up a nice weighted random distribution\r\n\t\tfor (let i = 0; i < this.segments.length; ++i) {\r\n\t\t\tconst {p1, p2} = this.segments[i];\r\n\t\t\tconst segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n\t\t\t// save length so we can turn a random number into a 0-1 interpolation value later\r\n\t\t\tthis.segments[i].l = segLength;\r\n\t\t\tthis.totalLength += segLength;\r\n\t\t\t// keep track of the length so far, counting up\r\n\t\t\tthis.countingLengths.push(this.totalLength);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets a random point in the chain.\r\n\t * @param out The point to store the selected position in.\r\n\t */\r\n\tpublic getRandomPoint(out:Point)\r\n\t{\r\n\t\t// select a random spot in the length of the chain\r\n\t\tconst rand = Math.random() * this.totalLength;\r\n\t\tlet chosenSeg:Segment;\r\n\t\tlet lerp:number;\r\n\t\t// if only one segment, it wins\r\n\t\tif (this.segments.length === 1)\r\n\t\t{\r\n\t\t\tchosenSeg = this.segments[0];\r\n\t\t\tlerp = rand;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// otherwise, go through countingLengths until we have determined\r\n\t\t\t// which segment we chose\r\n\t\t\tfor (let i = 0; i < this.countingLengths.length; ++i) {\r\n\t\t\t\tif (rand < this.countingLengths[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tchosenSeg = this.segments[i];\r\n\t\t\t\t\t// set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\r\n\t\t\t\t\tlerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// divide lerp by the segment length, to result in a 0-1 number.\r\n\t\tlerp /= chosenSeg.l || 1;\r\n\t\tconst {p1, p2} = chosenSeg;\r\n\t\t// now calculate the position in the segment that the lerp value represents\r\n\t\tout.x = p1.x + lerp * (p2.x - p1.x);\r\n\t\tout.y = p1.y + lerp * (p2.y - p1.y);\r\n\t}\r\n}","import {ParticleUtils, Color, SimpleEase} from \"./ParticleUtils\";\r\nimport {Particle} from \"./Particle\";\r\nimport {PropertyNode} from \"./PropertyNode\";\r\nimport {PolygonalChain} from \"./PolygonalChain\";\r\nimport {EmitterConfig, OldEmitterConfig} from \"./EmitterConfig\";\r\nimport {Point, Circle, Rectangle, Container, settings} from \"pixi.js-legacy\";\r\nimport * as pixi from \"pixi.js-legacy\";\r\n// get the shared ticker, in V4 and V5 friendly methods\r\n/**\r\n * @hidden\r\n */\r\nlet ticker: pixi.Ticker = pixi.Ticker.shared;\r\n\r\nexport interface ParticleConstructor\r\n{\r\n\tnew (emitter:Emitter):Particle;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A particle emitter.\r\n */\r\nexport class Emitter\r\n{\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in particle class.\r\n\t */\r\n\tprotected _particleConstructor: typeof Particle;\r\n\t//properties for individual particles\r\n\t/**\r\n\t * An array of PIXI Texture objects.\r\n\t */\r\n\tpublic particleImages: any[];\r\n\t/**\r\n\t * The first node in the list of alpha values for all particles.\r\n\t */\r\n\tpublic startAlpha: PropertyNode<number>;\r\n\t/**\r\n\t * The first node in the list of speed values of all particles.\r\n\t */\r\n\tpublic startSpeed: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\r\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tpublic minimumSpeedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to particles. Using this disables\r\n\t * any interpolation of particle speed. If the particles do\r\n\t * not have a rotation speed, then they will be rotated to\r\n\t * match the direction of travel.\r\n\t */\r\n\tpublic acceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tpublic maxSpeed: number;\r\n\t/**\r\n\t * The first node in the list of scale values of all particles.\r\n\t */\r\n\tpublic startScale: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\r\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tpublic minimumScaleMultiplier: number;\r\n\t/**\r\n\t * The first node in the list of  color values of all particles, as red, green, and blue\r\n\t * uints from 0-255.\r\n\t */\r\n\tpublic startColor: PropertyNode<Color>;\r\n\t/**\r\n\t * The minimum lifetime for a particle, in seconds.\r\n\t */\r\n\tpublic minLifetime: number;\r\n\t/**\r\n\t * The maximum lifetime for a particle, in seconds.\r\n\t */\r\n\tpublic maxLifetime: number;\r\n\t/**\r\n\t * The minimum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\r\n\t */\r\n\tpublic minStartRotation: number;\r\n\t/**\r\n\t * The maximum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\r\n\t */\r\n\tpublic maxStartRotation: number;\r\n\t/**\r\n\t * If no particle rotation should occur. Starting rotation will still\r\n\t * affect the direction in which particles move. If the rotation speed\r\n\t * is set, then this will be ignored.\r\n\t */\r\n\tpublic noRotation: boolean;\r\n\t/**\r\n\t * The minimum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tpublic minRotationSpeed: number;\r\n\t/**\r\n\t * The maximum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tpublic maxRotationSpeed: number;\r\n\t/**\r\n\t* The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\r\n\t*/\r\n\tpublic rotationAcceleration: number;\r\n\t/**\r\n\t * The blend mode for all particles, as named by PIXI.blendModes.\r\n\t */\r\n\tpublic particleBlendMode: number;\r\n\t/**\r\n\t * An easing function for nonlinear interpolation of values. Accepts a single\r\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\r\n\t * from 0-1, inclusive.\r\n\t */\r\n\tpublic customEase: SimpleEase;\r\n\t/**\r\n\t *\tExtra data for use in custom particles. The emitter doesn't look inside, but\r\n\t *\tpasses it on to the particle to use in init().\r\n\t */\r\n\tpublic extraData: any;\r\n\t//properties for spawning particles\r\n\t/**\r\n\t * Time between particle spawns in seconds.\r\n\t */\r\n\tprotected _frequency: number;\r\n\t/**\r\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\r\n\t * 0 is 0%, 1 is 100%.\r\n\t */\r\n\tpublic spawnChance: number;\r\n\t/**\r\n\t * Maximum number of particles to keep alive at a time. If this limit\r\n\t * is reached, no more particles will spawn until some have died.\r\n\t */\r\n\tpublic maxParticles: number;\r\n\t/**\r\n\t * The amount of time in seconds to emit for before setting emit to false.\r\n\t * A value of -1 is an unlimited amount of time.\r\n\t */\r\n\tpublic emitterLifetime: number;\r\n\t/**\r\n\t * Position at which to spawn particles, relative to the emitter's owner's origin.\r\n\t * For example, the flames of a rocket travelling right might have a spawnPos\r\n\t * of {x:-50, y:0}.\r\n\t * to spawn at the rear of the rocket.\r\n\t * To change this, use updateSpawnPos().\r\n\t */\r\n\tpublic spawnPos: Point;\r\n\t/**\r\n\t * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\r\n\t * \"circle\", \"burst\", \"ring\".\r\n\t */\r\n\tpublic spawnType: string;\r\n\t/**\r\n\t * A reference to the emitter function specific to the spawn type.\r\n\t */\r\n\tprotected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\r\n\t/**\r\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\r\n\t */\r\n\tpublic spawnRect: Rectangle;\r\n\t/**\r\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\r\n\t */\r\n\tpublic spawnPolygonalChain: PolygonalChain;\r\n\t/**\r\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\r\n\t */\r\n\tpublic spawnCircle: Circle & {minRadius: number};\r\n\t/**\r\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\r\n\t */\r\n\tpublic particlesPerWave: number;\r\n\t/**\r\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\r\n\t */\r\n\tpublic particleSpacing: number;\r\n\t/**\r\n\t * Angle at which to start spawning particles in a burst.\r\n\t */\r\n\tpublic angleStart: number;\r\n\t/**\r\n\t * Rotation of the emitter or emitter's owner in degrees. This is added to\r\n\t * the calculated spawn angle.\r\n\t * To change this, use rotate().\r\n\t */\r\n\tprotected rotation: number;\r\n\t/**\r\n\t * The world position of the emitter's owner, to add spawnPos to when\r\n\t * spawning particles. To change this, use updateOwnerPos().\r\n\t */\r\n\tprotected ownerPos: Point;\r\n\t/**\r\n\t * The origin + spawnPos in the previous update, so that the spawn position\r\n\t * can be interpolated to space out particles better.\r\n\t */\r\n\tprotected _prevEmitterPos: Point;\r\n\t/**\r\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\r\n\t */\r\n\tprotected _prevPosIsValid: boolean;\r\n\t/**\r\n\t * If either ownerPos or spawnPos has changed since the previous update.\r\n\t */\r\n\tprotected _posChanged: boolean;\r\n\t/**\r\n\t * The container to add particles to.\r\n\t */\r\n\tprotected _parent: Container;\r\n\t/**\r\n\t * If particles should be added at the back of the display list instead of the front.\r\n\t */\r\n\tpublic addAtBack: boolean;\r\n\t/**\r\n\t * The current number of active particles.\r\n\t */\r\n\tpublic particleCount: number;\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\tprotected _emit: boolean;\r\n\t/**\r\n\t * The timer for when to spawn particles in seconds, where numbers less\r\n\t * than 0 mean that particles should be spawned.\r\n\t */\r\n\tprotected _spawnTimer: number;\r\n\t/**\r\n\t * The life of the emitter in seconds.\r\n\t */\r\n\tprotected _emitterLife: number;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesFirst: Particle;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the last particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesLast: Particle;\r\n\t/**\r\n\t * The particles that are not currently being used. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _poolFirst: Particle;\r\n\t/**\r\n\t * The original config object that this emitter was initialized with.\r\n\t */\r\n\tprotected _origConfig: any;\r\n\t/**\r\n\t * The original particle image data that this emitter was initialized with.\r\n\t */\r\n\tprotected _origArt: any;\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tprotected _autoUpdate: boolean;\r\n\t/**\r\n\t * If the emitter should destroy itself when all particles have died out. This is set by\r\n\t * playOnceAndDestroy();\r\n\t */\r\n\tprotected _destroyWhenComplete: boolean;\r\n\t/**\r\n\t * A callback for when all particles have died out. This is set by\r\n\t * playOnceAndDestroy() or playOnce();\r\n\t */\r\n\tprotected _completeCallback: () => void;\r\n\r\n\t/**\r\n\t * @param particleParent The container to add the particles to.\r\n\t * @param particleImages A texture or array of textures to use\r\n\t *                       for the particles. Strings will be turned\r\n\t *                       into textures via Texture.fromImage().\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t * @param config.emit If config.emit is explicitly passed as false, the\r\n\t *                    Emitter will start disabled.\r\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\r\n\t *                          true, the Emitter will automatically call\r\n\t *                          update via the PIXI shared ticker.\r\n\t */\r\n\tconstructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t\tthis._particleConstructor = Particle;\r\n\t\t//properties for individual particles\r\n\t\tthis.particleImages = null;\r\n\t\tthis.startAlpha = null;\r\n\t\tthis.startSpeed = null;\r\n\t\tthis.minimumSpeedMultiplier = 1;\r\n\t\tthis.acceleration = null;\r\n\t\tthis.maxSpeed = NaN;\r\n\t\tthis.startScale = null;\r\n\t\tthis.minimumScaleMultiplier = 1;\r\n\t\tthis.startColor = null;\r\n\t\tthis.minLifetime = 0;\r\n\t\tthis.maxLifetime = 0;\r\n\t\tthis.minStartRotation = 0;\r\n\t\tthis.maxStartRotation = 0;\r\n\t\tthis.noRotation = false;\r\n\t\tthis.minRotationSpeed = 0;\r\n\t\tthis.maxRotationSpeed = 0;\r\n\t\tthis.particleBlendMode = 0;\r\n\t\tthis.customEase = null;\r\n\t\tthis.extraData = null;\r\n\t\t//properties for spawning particles\r\n\t\tthis._frequency = 1;\r\n\t\tthis.spawnChance = 1;\r\n\t\tthis.maxParticles = 1000;\r\n\t\tthis.emitterLifetime = -1;\r\n\t\tthis.spawnPos = null;\r\n\t\tthis.spawnType = null;\r\n\t\tthis._spawnFunc = null;\r\n\t\tthis.spawnRect = null;\r\n\t\tthis.spawnCircle = null;\r\n\t\tthis.spawnPolygonalChain = null;\r\n\t\tthis.particlesPerWave = 1;\r\n\t\tthis.particleSpacing = 0;\r\n\t\tthis.angleStart = 0;\r\n\t\t//emitter properties\r\n\t\tthis.rotation = 0;\r\n\t\tthis.ownerPos = null;\r\n\t\tthis._prevEmitterPos = null;\r\n\t\tthis._prevPosIsValid = false;\r\n\t\tthis._posChanged = false;\r\n\t\tthis._parent = null;\r\n\t\tthis.addAtBack = false;\r\n\t\tthis.particleCount = 0;\r\n\t\tthis._emit = false;\r\n\t\tthis._spawnTimer = 0;\r\n\t\tthis._emitterLife = -1;\r\n\t\tthis._activeParticlesFirst = null;\r\n\t\tthis._activeParticlesLast = null;\r\n\t\tthis._poolFirst = null;\r\n\t\tthis._origConfig = null;\r\n\t\tthis._origArt = null;\r\n\t\tthis._autoUpdate = false;\r\n\t\tthis._destroyWhenComplete = false;\r\n\t\tthis._completeCallback = null;\r\n\r\n\t\t//set the initial parent\r\n\t\tthis.parent = particleParent;\r\n\r\n\t\tif(particleImages && config)\r\n\t\t\tthis.init(particleImages, config);\r\n\r\n\t\t//save often used functions on the instance instead of the prototype for better speed\r\n\t\tthis.recycle = this.recycle;\r\n\t\tthis.update = this.update;\r\n\t\tthis.rotate = this.rotate;\r\n\t\tthis.updateSpawnPos = this.updateSpawnPos;\r\n\t\tthis.updateOwnerPos = this.updateOwnerPos;\r\n\t}\r\n\r\n\t/**\r\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\r\n\t */\r\n\tpublic get frequency() { return this._frequency; }\r\n\tpublic set frequency(value)\r\n\t{\r\n\t\t//do some error checking to prevent infinite loops\r\n\t\tif(typeof value == \"number\" && value > 0)\r\n\t\t\tthis._frequency = value;\r\n\t\telse\r\n\t\t\tthis._frequency = 1;\r\n\t}\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in Particle class. Setting this will dump any active or\r\n\t * pooled particles, if the emitter has already been used.\r\n\t */\r\n\tpublic get particleConstructor() { return this._particleConstructor; }\r\n\tpublic set particleConstructor(value)\r\n\t{\r\n\t\tif(value != this._particleConstructor)\r\n\t\t{\r\n\t\t\tthis._particleConstructor = value;\r\n\t\t\t//clean up existing particles\r\n\t\t\tthis.cleanup();\r\n\t\t\t//scrap all the particles\r\n\t\t\tfor (let particle = this._poolFirst; particle; particle = particle.next)\r\n\t\t\t{\r\n\t\t\t\tparticle.destroy();\r\n\t\t\t}\r\n\t\t\tthis._poolFirst = null;\r\n\t\t\t//re-initialize the emitter so that the new constructor can do anything it needs to\r\n\t\t\tif(this._origConfig && this._origArt)\r\n\t\t\t\tthis.init(this._origArt, this._origConfig);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* The container to add particles to. Settings this will dump any active particles.\r\n\t*/\r\n\tpublic get parent() { return this._parent; }\r\n\tpublic set parent(value)\r\n\t{\r\n\t\tthis.cleanup();\r\n\t\tthis._parent = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the emitter based on the config settings.\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tpublic init(art: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t\tif(!art || !config)\r\n\t\t\treturn;\r\n\t\t//clean up any existing particles\r\n\t\tthis.cleanup();\r\n\r\n\t\t//store the original config and particle images, in case we need to re-initialize\r\n\t\t//when the particle constructor is changed\r\n\t\tthis._origConfig = config;\r\n\t\tthis._origArt = art;\r\n\r\n\t\t//set up the array of data, also ensuring that it is an array\r\n\t\tart = Array.isArray(art) ? art.slice() : [art];\r\n\t\t//run the art through the particle class's parsing function\r\n\t\tconst partClass = this._particleConstructor;\r\n\t\tthis.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n\t\t///////////////////////////\r\n\t\t// Particle Properties   //\r\n\t\t///////////////////////////\r\n\t\t//set up the alpha\r\n\t\tif (config.alpha)\r\n\t\t{\r\n\t\t\tthis.startAlpha = PropertyNode.createList(config.alpha);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.startAlpha = new PropertyNode(1, 0);\r\n\t\t//set up the speed\r\n\t\tif (config.speed)\r\n\t\t{\r\n\t\t\tthis.startSpeed = PropertyNode.createList(config.speed);\r\n\t\t\tthis.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.minimumSpeedMultiplier = 1;\r\n\t\t\tthis.startSpeed = new PropertyNode(0, 0);\r\n\t\t}\r\n\t\t//set up acceleration\r\n\t\tlet acceleration = config.acceleration;\r\n\t\tif(acceleration && (acceleration.x || acceleration.y))\r\n\t\t{\r\n\t\t\t//make sure we disable speed interpolation\r\n\t\t\tthis.startSpeed.next = null;\r\n\t\t\tthis.acceleration = new Point(acceleration.x, acceleration.y);\r\n\t\t\tthis.maxSpeed = config.maxSpeed || NaN;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.acceleration = new Point();\r\n\t\t//set up the scale\r\n\t\tif (config.scale)\r\n\t\t{\r\n\t\t\tthis.startScale = PropertyNode.createList(config.scale);\r\n\t\t\tthis.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.startScale = new PropertyNode(1, 0);\r\n\t\t\tthis.minimumScaleMultiplier = 1;\r\n\t\t}\r\n\t\t//set up the color\r\n\t\tif (config.color)\r\n\t\t{\r\n\t\t\tthis.startColor = PropertyNode.createList(config.color);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.startColor = new PropertyNode({r:0xFF, g:0xFF, b:0xFF}, 0);\r\n\t\t}\r\n\t\t//set up the start rotation\r\n\t\tif (config.startRotation)\r\n\t\t{\r\n\t\t\tthis.minStartRotation = config.startRotation.min;\r\n\t\t\tthis.maxStartRotation = config.startRotation.max;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.minStartRotation = this.maxStartRotation = 0;\r\n\t\tif (config.noRotation &&\r\n\t\t\t(this.minStartRotation || this.maxStartRotation))\r\n\t\t{\r\n\t\t\tthis.noRotation = !!config.noRotation;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.noRotation = false;\r\n\t\t//set up the rotation speed\r\n\t\tif (config.rotationSpeed)\r\n\t\t{\r\n\t\t\tthis.minRotationSpeed = config.rotationSpeed.min;\r\n\t\t\tthis.maxRotationSpeed = config.rotationSpeed.max;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.minRotationSpeed = this.maxRotationSpeed = 0;\r\n\r\n\t\tthis.rotationAcceleration = config.rotationAcceleration || 0;\r\n\t\t//set up the lifetime\r\n\t\tthis.minLifetime = config.lifetime.min;\r\n\t\tthis.maxLifetime = config.lifetime.max;\r\n\t\t//get the blend mode\r\n\t\tthis.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\r\n\t\t//use the custom ease if provided\r\n\t\tif (config.ease)\r\n\t\t{\r\n\t\t\tthis.customEase = typeof config.ease == \"function\" ?\r\n\t\t\t\tconfig.ease : ParticleUtils.generateEase(config.ease);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.customEase = null;\r\n\t\t//set up the extra data, running it through the particle class's parseData function.\r\n\t\tif(partClass.parseData)\r\n\t\t\tthis.extraData = partClass.parseData(config.extraData);\r\n\t\telse\r\n\t\t\tthis.extraData = config.extraData || null;\r\n\t\t//////////////////////////\r\n\t\t// Emitter Properties   //\r\n\t\t//////////////////////////\r\n\t\t//reset spawn type specific settings\r\n\t\tthis.spawnRect = this.spawnCircle = null;\r\n\t\tthis.particlesPerWave = 1;\r\n\t\tif (config.particlesPerWave && config.particlesPerWave > 1)\r\n\t\t\tthis.particlesPerWave = config.particlesPerWave;\r\n\t\tthis.particleSpacing = 0;\r\n\t\tthis.angleStart = 0;\r\n\t\t//determine the spawn function to use\r\n\t\tthis.parseSpawnType(config);\r\n\t\t//set the spawning frequency\r\n\t\tthis.frequency = config.frequency;\r\n\t\tthis.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n\t\t//set the emitter lifetime\r\n\t\tthis.emitterLifetime = config.emitterLifetime || -1;\r\n\t\t//set the max particles\r\n\t\tthis.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n\t\t//determine if we should add the particle at the back of the list or not\r\n\t\tthis.addAtBack = !!config.addAtBack;\r\n\t\t//reset the emitter position and rotation variables\r\n\t\tthis.rotation = 0;\r\n\t\tthis.ownerPos = new Point();\r\n\t\tthis.spawnPos = new Point(config.pos.x, config.pos.y);\r\n\r\n\t\tthis.initAdditional(art, config);\r\n\r\n\t\tthis._prevEmitterPos = this.spawnPos.clone();\r\n\t\t//previous emitter position is invalid and should not be used for interpolation\r\n\t\tthis._prevPosIsValid = false;\r\n\t\t//start emitting\r\n\t\tthis._spawnTimer = 0;\r\n\t\tthis.emit = config.emit === undefined ? true : !!config.emit;\r\n\t\tthis.autoUpdate = !!config.autoUpdate;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up additional parameters to the emitter from config settings.\r\n\t * Using for parsing additional parameters on classes that extend from Emitter\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t}\r\n\r\n\t/**\r\n\t * Parsing emitter spawn type from config settings.\r\n\t * Place for override and add new kind of spawn type\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected parseSpawnType(config: EmitterConfig|OldEmitterConfig) {\r\n\t\tlet spawnCircle;\r\n\r\n\t\tswitch(config.spawnType)\r\n\t\t{\r\n\t\t\tcase \"rect\":\r\n\t\t\t\tthis.spawnType = \"rect\";\r\n\t\t\t\tthis._spawnFunc = this._spawnRect;\r\n\t\t\t\tlet spawnRect = config.spawnRect;\r\n\t\t\t\tthis.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"circle\":\r\n\t\t\t\tthis.spawnType = \"circle\";\r\n\t\t\t\tthis._spawnFunc = this._spawnCircle;\r\n\t\t\t\tspawnCircle = config.spawnCircle;\r\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ring\":\r\n\t\t\t\tthis.spawnType = \"ring\";\r\n\t\t\t\tthis._spawnFunc = this._spawnRing;\r\n\t\t\t\tspawnCircle = config.spawnCircle;\r\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n\t\t\t\tthis.spawnCircle.minRadius = spawnCircle.minR;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"burst\":\r\n\t\t\t\tthis.spawnType = \"burst\";\r\n\t\t\t\tthis._spawnFunc = this._spawnBurst;\r\n\t\t\t\tthis.particleSpacing = config.particleSpacing;\r\n\t\t\t\tthis.angleStart = config.angleStart ? config.angleStart : 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"point\":\r\n\t\t\t\tthis.spawnType = \"point\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"polygonalChain\":\r\n\t\t\t\tthis.spawnType = \"polygonalChain\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPolygonalChain;\r\n\t\t\t\tthis.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.spawnType = \"point\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recycles an individual particle. For internal use only.\r\n\t * @param particle The particle to recycle.\r\n\t * @internal\r\n\t */\r\n\tpublic recycle(particle: Particle)\r\n\t{\r\n\t\tif(particle.next)\r\n\t\t\tparticle.next.prev = particle.prev;\r\n\t\tif(particle.prev)\r\n\t\t\tparticle.prev.next = particle.next;\r\n\t\tif(particle == this._activeParticlesLast)\r\n\t\t\tthis._activeParticlesLast = particle.prev;\r\n\t\tif(particle == this._activeParticlesFirst)\r\n\t\t\tthis._activeParticlesFirst = particle.next;\r\n\t\t//add to pool\r\n\t\tparticle.prev = null;\r\n\t\tparticle.next = this._poolFirst;\r\n\t\tthis._poolFirst = particle;\r\n\t\t//remove child from display, or make it invisible if it is in a ParticleContainer\r\n\t\tif(particle.parent)\r\n\t\t\tparticle.parent.removeChild(particle);\r\n\t\t//decrease count\r\n\t\t--this.particleCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the rotation of the emitter to a new value.\r\n\t * @param newRot The new rotation, in degrees.\r\n\t */\r\n\tpublic rotate(newRot: number)\r\n\t{\r\n\t\tif (this.rotation == newRot) return;\r\n\t\t//caclulate the difference in rotation for rotating spawnPos\r\n\t\tlet diff = newRot - this.rotation;\r\n\t\tthis.rotation = newRot;\r\n\t\t//rotate spawnPos\r\n\t\tParticleUtils.rotatePoint(diff, this.spawnPos);\r\n\t\t//mark the position as having changed\r\n\t\tthis._posChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the spawn position of the emitter.\r\n\t * @param x The new x value of the spawn position for the emitter.\r\n\t * @param y The new y value of the spawn position for the emitter.\r\n\t */\r\n\tpublic updateSpawnPos(x: number, y: number)\r\n\t{\r\n\t\tthis._posChanged = true;\r\n\t\tthis.spawnPos.x = x;\r\n\t\tthis.spawnPos.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the position of the emitter's owner. You should call this if you are adding\r\n\t * particles to the world container that your emitter's owner is moving around in.\r\n\t * @param x The new x value of the emitter's owner.\r\n\t * @param y The new y value of the emitter's owner.\r\n\t */\r\n\tpublic updateOwnerPos(x: number, y: number)\r\n\t{\r\n\t\tthis._posChanged = true;\r\n\t\tthis.ownerPos.x = x;\r\n\t\tthis.ownerPos.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents emitter position interpolation in the next update.\r\n\t * This should be used if you made a major position change of your emitter's owner\r\n\t * that was not normal movement.\r\n\t */\r\n\tpublic resetPositionTracking()\r\n\t{\r\n\t\tthis._prevPosIsValid = false;\r\n\t}\r\n\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\tpublic get emit() { return this._emit; };\r\n\tpublic set emit(value)\r\n\t{\r\n\t\tthis._emit = !!value;\r\n\t\tthis._emitterLife = this.emitterLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tpublic get autoUpdate() { return this._autoUpdate; }\r\n\tpublic set autoUpdate(value)\r\n\t{\r\n\t\tif (this._autoUpdate && !value)\r\n\t\t{\r\n\t\t\tticker.remove(this.update, this);\r\n\t\t}\r\n\t\telse if (!this._autoUpdate && value)\r\n\t\t{\r\n\t\t\tticker.add(this.update, this);\r\n\t\t}\r\n\t\tthis._autoUpdate = !!value;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n\t * when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tpublic playOnceAndDestroy(callback?: () => void)\r\n\t{\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.emit = true;\r\n\t\tthis._destroyWhenComplete = true;\r\n\t\tthis._completeCallback = callback;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tpublic playOnce(callback?: () => void)\r\n\t{\r\n\t\tthis.emit = true;\r\n\t\tthis._completeCallback = callback;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all particles spawned by this emitter and emits new ones.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number)\r\n\t{\r\n\t\tif (this._autoUpdate)\r\n\t\t{\r\n\t\t\tdelta = delta / settings.TARGET_FPMS / 1000;\r\n\t\t}\r\n\r\n\t\t//if we don't have a parent to add particles to, then don't do anything.\r\n\t\t//this also works as a isDestroyed check\r\n\t\tif (!this._parent) return;\r\n\t\t//update existing particles\r\n\t\tlet i, particle, next;\r\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\tnext = particle.next;\r\n\t\t\tparticle.update(delta);\r\n\t\t}\r\n\t\tlet prevX, prevY;\r\n\t\t//if the previous position is valid, store these for later interpolation\r\n\t\tif(this._prevPosIsValid)\r\n\t\t{\r\n\t\t\tprevX = this._prevEmitterPos.x;\r\n\t\t\tprevY = this._prevEmitterPos.y;\r\n\t\t}\r\n\t\t//store current position of the emitter as local variables\r\n\t\tlet curX = this.ownerPos.x + this.spawnPos.x;\r\n\t\tlet curY = this.ownerPos.y + this.spawnPos.y;\r\n\t\t//spawn new particles\r\n\t\tif (this._emit)\r\n\t\t{\r\n\t\t\t//decrease spawn timer\r\n\t\t\tthis._spawnTimer -=  delta < 0 ? 0 : delta;\r\n\t\t\t//while _spawnTimer < 0, we have particles to spawn\r\n\t\t\twhile(this._spawnTimer <= 0)\r\n\t\t\t{\r\n\t\t\t\t//determine if the emitter should stop spawning\r\n\t\t\t\tif(this._emitterLife > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._emitterLife -= this._frequency;\r\n\t\t\t\t\tif(this._emitterLife <= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis._spawnTimer = 0;\r\n\t\t\t\t\t\tthis._emitterLife = 0;\r\n\t\t\t\t\t\tthis.emit = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//determine if we have hit the particle limit\r\n\t\t\t\tif(this.particleCount >= this.maxParticles)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._spawnTimer += this._frequency;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t//determine the particle lifetime\r\n\t\t\t\tlet lifetime;\r\n\t\t\t\tif (this.minLifetime == this.maxLifetime)\r\n\t\t\t\t\tlifetime = this.minLifetime;\r\n\t\t\t\telse\r\n\t\t\t\t\tlifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\r\n\t\t\t\t//only make the particle if it wouldn't immediately destroy itself\r\n\t\t\t\tif(-this._spawnTimer < lifetime)\r\n\t\t\t\t{\r\n\t\t\t\t\t//If the position has changed and this isn't the first spawn,\r\n\t\t\t\t\t//interpolate the spawn position\r\n\t\t\t\t\tlet emitPosX, emitPosY;\r\n\t\t\t\t\tif (this._prevPosIsValid && this._posChanged)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//1 - _spawnTimer / delta, but _spawnTimer is negative\r\n\t\t\t\t\t\tlet lerp = 1 + this._spawnTimer / delta;\r\n\t\t\t\t\t\temitPosX = (curX - prevX) * lerp + prevX;\r\n\t\t\t\t\t\temitPosY = (curY - prevY) * lerp + prevY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse//otherwise just set to the spawn position\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\temitPosX = curX;\r\n\t\t\t\t\t\temitPosY = curY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//create enough particles to fill the wave (non-burst types have a wave of 1)\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor(let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//see if we actually spawn one\r\n\t\t\t\t\t\tif (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t//create particle\r\n\t\t\t\t\t\tlet p;\r\n\t\t\t\t\t\tif(this._poolFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp = this._poolFirst;\r\n\t\t\t\t\t\t\tthis._poolFirst = this._poolFirst.next;\r\n\t\t\t\t\t\t\tp.next = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp = new this.particleConstructor(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//set a random texture if we have more than one\r\n\t\t\t\t\t\tif(this.particleImages.length > 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//if they are actually the same texture, a standard particle\r\n\t\t\t\t\t\t\t//will quit early from the texture setting in setTexture().\r\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//set up the start and end values\r\n\t\t\t\t\t\tp.alphaList.reset(this.startAlpha);\r\n\t\t\t\t\t\tif(this.minimumSpeedMultiplier != 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.speedList.reset(this.startSpeed);\r\n\t\t\t\t\t\tp.acceleration.x = this.acceleration.x;\r\n\t\t\t\t\t\tp.acceleration.y = this.acceleration.y;\r\n\t\t\t\t\t\tp.maxSpeed = this.maxSpeed;\r\n\t\t\t\t\t\tif(this.minimumScaleMultiplier != 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.scaleList.reset(this.startScale);\r\n\t\t\t\t\t\tp.colorList.reset(this.startColor);\r\n\t\t\t\t\t\t//randomize the rotation speed\r\n\t\t\t\t\t\tif(this.minRotationSpeed == this.maxRotationSpeed)\r\n\t\t\t\t\t\t\tp.rotationSpeed = this.minRotationSpeed;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tp.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\r\n\t\t\t\t\t\tp.rotationAcceleration = this.rotationAcceleration;\r\n\t\t\t\t\t\tp.noRotation = this.noRotation;\r\n\t\t\t\t\t\t//set up the lifetime\r\n\t\t\t\t\t\tp.maxLife = lifetime;\r\n\t\t\t\t\t\t//set the blend mode\r\n\t\t\t\t\t\tp.blendMode = this.particleBlendMode;\r\n\t\t\t\t\t\t//set the custom ease, if any\r\n\t\t\t\t\t\tp.ease = this.customEase;\r\n\t\t\t\t\t\t//set the extra data, if any\r\n\t\t\t\t\t\tp.extraData = this.extraData;\r\n\t\t\t\t\t\t//set additional properties to particle\r\n\t\t\t\t\t\tthis.applyAdditionalProperties(p);\r\n\t\t\t\t\t\t//call the proper function to handle rotation and position of particle\r\n\t\t\t\t\t\tthis._spawnFunc(p, emitPosX, emitPosY, i);\r\n\t\t\t\t\t\t//initialize particle\r\n\t\t\t\t\t\tp.init();\r\n\t\t\t\t\t\t//update the particle by the time passed, so the particles are spread out properly\r\n\t\t\t\t\t\tp.update(-this._spawnTimer);//we want a positive delta, because a negative delta messes things up\r\n\t\t\t\t\t\t//add the particle to the display list\r\n\t\t\t\t\t\tif(!p.parent)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (this.addAtBack)\r\n\t\t\t\t\t\t\t\tthis._parent.addChildAt(p, 0);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tthis._parent.addChild(p);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//kind of hacky, but performance friendly\r\n\t\t\t\t\t\t\t//shuffle children to correct place\r\n\t\t\t\t\t\t\tlet children = this._parent.children;\r\n\t\t\t\t\t\t\t//avoid using splice if possible\r\n\t\t\t\t\t\t\tif(children[0] == p)\r\n\t\t\t\t\t\t\t\tchildren.shift();\r\n\t\t\t\t\t\t\telse if(children[children.length-1] == p)\r\n\t\t\t\t\t\t\t\tchildren.pop();\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet index = children.indexOf(p);\r\n\t\t\t\t\t\t\t\tchildren.splice(index, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(this.addAtBack)\r\n\t\t\t\t\t\t\t\tchildren.unshift(p);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tchildren.push(p);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//add particle to list of active particles\r\n\t\t\t\t\t\tif(this._activeParticlesLast)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis._activeParticlesLast.next = p;\r\n\t\t\t\t\t\t\tp.prev = this._activeParticlesLast;\r\n\t\t\t\t\t\t\tthis._activeParticlesLast = p;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis._activeParticlesLast = this._activeParticlesFirst = p;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t++this.particleCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//increase timer and continue on to any other particles that need to be created\r\n\t\t\t\tthis._spawnTimer += this._frequency;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//if the position changed before this update, then keep track of that\r\n\t\tif(this._posChanged)\r\n\t\t{\r\n\t\t\tthis._prevEmitterPos.x = curX;\r\n\t\t\tthis._prevEmitterPos.y = curY;\r\n\t\t\tthis._prevPosIsValid = true;\r\n\t\t\tthis._posChanged = false;\r\n\t\t}\r\n\r\n\t\t//if we are all done and should destroy ourselves, take care of that\r\n\t\tif (!this._emit && !this._activeParticlesFirst)\r\n\t\t{\r\n\t\t\tif (this._completeCallback)\r\n\t\t\t{\r\n\t\t\t\tconst cb = this._completeCallback;\r\n\t\t\t\tthis._completeCallback = null;\r\n\t\t\t\tcb();\r\n\t\t\t}\r\n\t\t\tif (this._destroyWhenComplete)\r\n\t\t\t{\r\n\t\t\t\tthis.destroy();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set additional properties to new particle.\r\n\t * Using on classes that extend from Emitter\r\n\t * @param p The particle\r\n\t */\r\n\tprotected applyAdditionalProperties(p: Particle) {\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a point type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on\r\n\t\t//starting particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n\t\t//drop the particle at the emitter's position\r\n\t\tp.position.x = emitPosX;\r\n\t\tp.position.y = emitPosY;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a rectangle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random point in the rectangle\r\n\t\thelperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\r\n\t\thelperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a circle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random radius in the circle\r\n\t\thelperPoint.x = Math.random() * this.spawnCircle.radius;\r\n\t\thelperPoint.y = 0;\r\n\t\t//rotate the point to a random angle in the circle\r\n\t\tParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\r\n\t\t//offset by the circle's center\r\n\t\thelperPoint.x += this.spawnCircle.x;\r\n\t\thelperPoint.y += this.spawnCircle.y;\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a ring type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\tlet spawnCircle = this.spawnCircle;\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random radius in the ring\r\n\t\tif(spawnCircle.minRadius !== spawnCircle.radius)\r\n\t\t{\r\n\t\t\thelperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\r\n\t\t\t\t\t\t\tspawnCircle.minRadius;\r\n\t\t}\r\n\t\telse\r\n\t\t\thelperPoint.x = spawnCircle.radius;\r\n\t\thelperPoint.y = 0;\r\n\t\t//rotate the point to a random angle in the circle\r\n\t\tlet angle = Math.random() * 360;\r\n\t\tp.rotation += angle;\r\n\t\tParticleUtils.rotatePoint(angle, helperPoint);\r\n\t\t//offset by the circle's center\r\n\t\thelperPoint.x += this.spawnCircle.x;\r\n\t\thelperPoint.y += this.spawnCircle.y;\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for polygonal chain.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t// get random point on the polygon chain\r\n\t\tthis.spawnPolygonalChain.getRandomPoint(helperPoint);\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a burst type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave.\r\n\t */\r\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on spawn\r\n\t\t//angle and rotation of emitter\r\n\t\tif(this.particleSpacing === 0)\r\n\t\t\tp.rotation = Math.random() * 360;\r\n\t\telse\r\n\t\t\tp.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n\t\t//drop the particle at the emitter's position\r\n\t\tp.position.x = emitPosX;\r\n\t\tp.position.y = emitPosY;\r\n\t}\r\n\r\n\t/**\r\n\t * Kills all active particles immediately.\r\n\t */\r\n\tpublic cleanup()\r\n\t{\r\n\t\tlet particle, next;\r\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\tnext = particle.next;\r\n\t\t\tthis.recycle(particle);\r\n\t\t\tif(particle.parent)\r\n\t\t\t\tparticle.parent.removeChild(particle);\r\n\t\t}\r\n\t\tthis._activeParticlesFirst = this._activeParticlesLast = null;\r\n\t\tthis.particleCount = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the emitter and all of its particles.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\t//make sure we aren't still listening to any tickers\r\n\t\tthis.autoUpdate = false;\r\n\t\t//puts all active particles in the pool, and removes them from the particle parent\r\n\t\tthis.cleanup();\r\n\t\t//wipe the pool clean\r\n\t\tlet next;\r\n\t\tfor (let particle = this._poolFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\t//store next value so we don't lose it in our destroy call\r\n\t\t\tnext = particle.next;\r\n\t\t\tparticle.destroy();\r\n\t\t}\r\n\t\tthis._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\r\n\t\t\tthis.startColor = this.startScale = this.startAlpha = this.startSpeed =\r\n\t\t\tthis.customEase = this._completeCallback = null;\r\n\t}\r\n}\r\n","import {ParticleUtils} from \"./ParticleUtils\";\r\nimport {Particle} from \"./Particle\";\r\nimport {Emitter} from \"./Emitter\";\r\nimport {Point, Texture} from 'pixi.js-legacy';\r\n\r\n/**\r\n * A helper point for math things.\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A hand picked list of Math functions (and a couple properties) that are\r\n * allowable. They should be used without the preceding \"Math.\"\r\n * @hidden\r\n */\r\nconst MATH_FUNCS =\r\n[\r\n\t\"pow\",\r\n\t\"sqrt\",\r\n\t\"abs\",\r\n\t\"floor\",\r\n\t\"round\",\r\n\t\"ceil\",\r\n\t\"E\",\r\n\t\"PI\",\r\n\t\"sin\",\r\n\t\"cos\",\r\n\t\"tan\",\r\n\t\"asin\",\r\n\t\"acos\",\r\n\t\"atan\",\r\n\t\"atan2\",\r\n\t\"log\"\r\n];\r\n/**\r\n * create an actual regular expression object from the string\r\n * @hidden\r\n */\r\nconst WHITELISTER = new RegExp(\r\n\t[\r\n\t\t//Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n\t\t//as 'x', for the variable usage.\r\n\t\t\"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\r\n\t].concat(MATH_FUNCS).join(\"|\"),\r\n\t\"g\"\r\n);\r\n\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @hidden\r\n * @param pathString The string to parse.\r\n * @return The path function - takes x, outputs y.\r\n */\r\nconst parsePath = function(pathString: string)\r\n{\r\n\tlet matches = pathString.match(WHITELISTER);\r\n\tfor(let i = matches.length - 1; i >= 0; --i)\r\n\t{\r\n\t\tif(MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n\t\t\tmatches[i] = \"Math.\" + matches[i];\r\n\t}\r\n\tpathString = matches.join(\"\");\r\n\treturn new Function(\"x\", \"return \"+ pathString + \";\");\r\n};\r\n\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n */\r\nexport class PathParticle extends Particle\r\n{\r\n\t/**\r\n\t * The function representing the path the particle should take.\r\n\t */\r\n\tpublic path: Function;\r\n\t/**\r\n\t * The initial rotation in degrees of the particle, because the direction of the path\r\n\t * is based on that.\r\n\t */\r\n\tpublic initialRotation: number;\r\n\t/**\r\n\t * The initial position of the particle, as all path movement is added to that.\r\n\t */\r\n\tpublic initialPosition: Point;\r\n\t/**\r\n\t * Total single directional movement, due to speed.\r\n\t */\r\n\tpublic movement: number;\r\n\t\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\tsuper(emitter);\r\n\t\tthis.path = null;\r\n\t\tthis.initialRotation = 0;\r\n\t\tthis.initialPosition = new Point();\r\n\t\tthis.movement = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\t//get initial rotation before it is converted to radians\r\n\t\tthis.initialRotation = this.rotation;\r\n\t\t//standard init\r\n\t\tthis.Particle_init();\r\n\r\n\t\t//set the path for the particle\r\n\t\tthis.path = this.extraData.path;\r\n\t\t//cancel the normal movement behavior\r\n\t\tthis._doNormalMovement = !this.path;\r\n\t\t//reset movement\r\n\t\tthis.movement = 0;\r\n\t\t//grab position\r\n\t\tthis.initialPosition.x = this.position.x;\r\n\t\tthis.initialPosition.y = this.position.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\tconst lerp = this.Particle_update(delta);\r\n\t\t//if the particle died during the update, then don't bother\r\n\t\tif(lerp >= 0 && this.path)\r\n\t\t{\r\n\t\t\t//increase linear movement based on speed\r\n\t\t\tconst speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\t\t\tthis.movement += speed * delta;\r\n\t\t\t//set up the helper point for rotation\r\n\t\t\thelperPoint.x = this.movement;\r\n\t\t\thelperPoint.y = this.path(this.movement);\r\n\t\t\tParticleUtils.rotatePoint(this.initialRotation, helperPoint);\r\n\t\t\tthis.position.x = this.initialPosition.x + helperPoint.x;\r\n\t\t\tthis.position.y = this.initialPosition.y + helperPoint.y;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tthis.Particle_destroy();\r\n\t\tthis.path = this.initialPosition = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.fromImage().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art: (Texture|string)[]):Texture[]\r\n\t{\r\n\t\treturn Particle.parseArt(art);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * PathParticle checks for the existence of path data, and parses the path data for use\r\n\t * by particle instances.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tpublic static parseData(extraData: {path:string})\r\n\t{\r\n\t\tlet output: any = {};\r\n\t\tif(extraData && extraData.path)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\toutput.path = parsePath(extraData.path);\r\n\t\t\t}\r\n\t\t\tcatch(e)\r\n\t\t\t{\r\n\t\t\t\tif(ParticleUtils.verbose)\r\n\t\t\t\t\tconsole.error(\"PathParticle: error in parsing path expression\");\r\n\t\t\t\toutput.path = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(ParticleUtils.verbose)\r\n\t\t\t\tconsole.error(\"PathParticle requires a path string in extraData!\");\r\n\t\t\toutput.path = null;\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n}","import {Particle} from \"./Particle\";\r\nimport {Emitter} from \"./Emitter\";\r\nimport {GetTextureFromString} from \"./ParticleUtils\";\r\nimport {Texture} from 'pixi.js-legacy';\r\n\r\nexport interface ParsedAnimatedParticleArt\r\n{\r\n\ttextures: Texture[];\r\n\tduration: number;\r\n\tframerate: number;\r\n\tloop: boolean;\r\n}\r\n\r\nexport interface AnimatedParticleArt\r\n{\r\n\tframerate: \"matchLife\"|number;\r\n\tloop?: boolean;\r\n\ttextures: (string|Texture|{texture:string|Texture,count:number})[];\r\n}\r\n\r\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n * ```typescript\r\n * {\r\n *     //framerate is required. It is the animation speed of the particle in frames per\r\n *     //second.\r\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *     //particle, instead of at a constant framerate. This causes the animation to play\r\n *     //through one time, completing when the particle expires.\r\n *     framerate: 6,\r\n *     //loop is optional, and defaults to false.\r\n *     loop: true,\r\n *     //textures is required, and can be an array of any (non-zero) length.\r\n *     textures: [\r\n *         //each entry represents a single texture that should be used for one or more\r\n *         //frames. Any strings will be converted to Textures with Texture.from().\r\n *         //Instances of PIXI.Texture will be used directly.\r\n *         \"animFrame1.png\",\r\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *         //use that texture for 'count' frames sequentially.\r\n *         {\r\n *             texture: \"animFrame2.png\",\r\n *             count: 3\r\n *         },\r\n *         \"animFrame3.png\"\r\n *     ]\r\n * }\r\n * ```\r\n */\r\nexport class AnimatedParticle extends Particle\r\n{\r\n\t/**\r\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\r\n\t */\r\n\tprivate textures: Texture[];\r\n\r\n\t/**\r\n\t * Duration of the animation, in seconds.\r\n\t */\r\n\tprivate duration: number;\r\n\r\n\t/**\r\n\t * Animation framerate, in frames per second.\r\n\t */\r\n\tprivate framerate: number;\r\n\r\n\t/**\r\n\t * Animation time elapsed, in seconds.\r\n\t */\r\n\tprivate elapsed: number;\r\n\r\n\t/**\r\n\t * If this particle animation should loop.\r\n\t */\r\n\tprivate loop: boolean;\r\n\t\r\n\t/**\r\n\t * @param emitter The emitter that controls this AnimatedParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\tsuper(emitter);\r\n\r\n\t\tthis.textures = null;\r\n\t\tthis.duration = 0;\r\n\t\tthis.framerate = 0;\r\n\t\tthis.elapsed = 0;\r\n\t\tthis.loop = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\tthis.Particle_init();\r\n\r\n\t\tthis.elapsed = 0;\r\n\r\n\t\t//if the animation needs to match the particle's life, then cacluate variables\r\n\t\tif(this.framerate < 0)\r\n\t\t{\r\n\t\t\tthis.duration = this.maxLife;\r\n\t\t\tthis.framerate = this.textures.length / this.duration;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the textures for the particle.\r\n\t * @param art An array of PIXI.Texture objects for this animated particle.\r\n\t */\r\n\tpublic applyArt(art: ParsedAnimatedParticleArt)\r\n\t{\r\n\t\tthis.textures = art.textures;\r\n\t\tthis.framerate = art.framerate;\r\n\t\tthis.duration = art.duration;\r\n\t\tthis.loop = art.loop;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\tconst lerp = this.Particle_update(delta);\r\n\t\t//only animate the particle if it is still alive\r\n\t\tif(lerp >= 0)\r\n\t\t{\r\n\t\t\tthis.elapsed += delta;\r\n\t\t\tif(this.elapsed > this.duration)\r\n\t\t\t{\r\n\t\t\t\t//loop elapsed back around\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.elapsed = this.elapsed % this.duration;\r\n\t\t\t\t//subtract a small amount to prevent attempting to go past the end of the animation\r\n\t\t\t\telse\r\n\t\t\t\t\tthis.elapsed = this.duration - 0.000001;\r\n\t\t\t}\r\n\t\t\t// add a very small number to the frame and then floor it to avoid\r\n\t\t\t// the frame being one short due to floating point errors.\r\n\t\t\tlet frame = (this.elapsed * this.framerate + 0.0000001) | 0;\r\n\t\t\tthis.texture = this.textures[frame] || Texture.EMPTY;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tthis.Particle_destroy();\r\n\t\tthis.textures = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art: AnimatedParticleArt[])\r\n\t{\r\n\t\tlet data, output: any, textures, tex, outTextures;\r\n\t\tlet outArr:ParsedAnimatedParticleArt[] = [];\r\n\t\tfor(let i = 0; i < art.length; ++i)\r\n\t\t{\r\n\t\t\tdata = art[i];\r\n\t\t\toutArr[i] = output = {} as ParsedAnimatedParticleArt;\r\n\t\t\toutput.textures = outTextures = [];\r\n\t\t\ttextures = data.textures;\r\n\t\t\tfor(let j = 0; j < textures.length; ++j)\r\n\t\t\t{\r\n\t\t\t\ttex = textures[j];\r\n\t\t\t\tif(typeof tex == \"string\")\r\n\t\t\t\t\toutTextures.push(GetTextureFromString(tex));\r\n\t\t\t\telse if(tex instanceof Texture)\r\n\t\t\t\t\toutTextures.push(tex);\r\n\t\t\t\t//assume an object with extra data determining duplicate frame data\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlet dupe = tex.count || 1;\r\n\t\t\t\t\tif(typeof tex.texture == \"string\")\r\n\t\t\t\t\t\ttex = GetTextureFromString(tex.texture);\r\n\t\t\t\t\telse// if(tex.texture instanceof Texture)\r\n\t\t\t\t\t\ttex = tex.texture;\r\n\t\t\t\t\tfor(; dupe > 0; --dupe)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toutTextures.push(tex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//use these values to signify that the animation should match the particle life time.\r\n\t\t\tif(data.framerate == \"matchLife\")\r\n\t\t\t{\r\n\t\t\t\t//-1 means that it should be calculated\r\n\t\t\t\toutput.framerate = -1;\r\n\t\t\t\toutput.duration = 0;\r\n\t\t\t\toutput.loop = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//determine if the animation should loop\r\n\t\t\t\toutput.loop = !!data.loop;\r\n\t\t\t\t//get the framerate, default to 60\r\n\t\t\t\toutput.framerate = data.framerate > 0 ? data.framerate : 60;\r\n\t\t\t\t//determine the duration\r\n\t\t\t\toutput.duration = outTextures.length / output.framerate;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn outArr;\r\n\t}\r\n}"]}